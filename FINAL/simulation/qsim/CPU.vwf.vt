// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/07/2015 16:59:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CENTRAL_PROCESSOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CENTRAL_PROCESSOR_vlg_sample_tst(
	CLK,
	FULL_RESET,
	START,
	sampler_tx
);
input  CLK;
input  FULL_RESET;
input  START;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or FULL_RESET or START)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CENTRAL_PROCESSOR_vlg_check_tst (
	AC_TOCPU,
	PC_TOCPU,
	sampler_rx
);
input [7:0] AC_TOCPU;
input [15:0] PC_TOCPU;
input sampler_rx;

reg [7:0] AC_TOCPU_expected;
reg [15:0] PC_TOCPU_expected;

reg [7:0] AC_TOCPU_prev;
reg [15:0] PC_TOCPU_prev;

reg [7:0] AC_TOCPU_expected_prev;
reg [15:0] PC_TOCPU_expected_prev;

reg [7:0] last_AC_TOCPU_exp;
reg [15:0] last_PC_TOCPU_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	AC_TOCPU_prev = AC_TOCPU;
	PC_TOCPU_prev = PC_TOCPU;
end

// update expected /o prevs

always @(trigger)
begin
	AC_TOCPU_expected_prev = AC_TOCPU_expected;
	PC_TOCPU_expected_prev = PC_TOCPU_expected;
end


// expected AC_TOCPU[ 7 ]
initial
begin
	AC_TOCPU_expected[7] = 1'bX;
end 
// expected AC_TOCPU[ 6 ]
initial
begin
	AC_TOCPU_expected[6] = 1'bX;
end 
// expected AC_TOCPU[ 5 ]
initial
begin
	AC_TOCPU_expected[5] = 1'bX;
end 
// expected AC_TOCPU[ 4 ]
initial
begin
	AC_TOCPU_expected[4] = 1'bX;
end 
// expected AC_TOCPU[ 3 ]
initial
begin
	AC_TOCPU_expected[3] = 1'bX;
end 
// expected AC_TOCPU[ 2 ]
initial
begin
	AC_TOCPU_expected[2] = 1'bX;
end 
// expected AC_TOCPU[ 1 ]
initial
begin
	AC_TOCPU_expected[1] = 1'bX;
end 
// expected AC_TOCPU[ 0 ]
initial
begin
	AC_TOCPU_expected[0] = 1'bX;
end 
// expected PC_TOCPU[ 15 ]
initial
begin
	PC_TOCPU_expected[15] = 1'bX;
end 
// expected PC_TOCPU[ 14 ]
initial
begin
	PC_TOCPU_expected[14] = 1'bX;
end 
// expected PC_TOCPU[ 13 ]
initial
begin
	PC_TOCPU_expected[13] = 1'bX;
end 
// expected PC_TOCPU[ 12 ]
initial
begin
	PC_TOCPU_expected[12] = 1'bX;
end 
// expected PC_TOCPU[ 11 ]
initial
begin
	PC_TOCPU_expected[11] = 1'bX;
end 
// expected PC_TOCPU[ 10 ]
initial
begin
	PC_TOCPU_expected[10] = 1'bX;
end 
// expected PC_TOCPU[ 9 ]
initial
begin
	PC_TOCPU_expected[9] = 1'bX;
end 
// expected PC_TOCPU[ 8 ]
initial
begin
	PC_TOCPU_expected[8] = 1'bX;
end 
// expected PC_TOCPU[ 7 ]
initial
begin
	PC_TOCPU_expected[7] = 1'bX;
end 
// expected PC_TOCPU[ 6 ]
initial
begin
	PC_TOCPU_expected[6] = 1'bX;
end 
// expected PC_TOCPU[ 5 ]
initial
begin
	PC_TOCPU_expected[5] = 1'bX;
end 
// expected PC_TOCPU[ 4 ]
initial
begin
	PC_TOCPU_expected[4] = 1'bX;
end 
// expected PC_TOCPU[ 3 ]
initial
begin
	PC_TOCPU_expected[3] = 1'bX;
end 
// expected PC_TOCPU[ 2 ]
initial
begin
	PC_TOCPU_expected[2] = 1'bX;
end 
// expected PC_TOCPU[ 1 ]
initial
begin
	PC_TOCPU_expected[1] = 1'bX;
end 
// expected PC_TOCPU[ 0 ]
initial
begin
	PC_TOCPU_expected[0] = 1'bX;
end 
// generate trigger
always @(AC_TOCPU_expected or AC_TOCPU or PC_TOCPU_expected or PC_TOCPU)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AC_TOCPU = %b | expected PC_TOCPU = %b | ",AC_TOCPU_expected_prev,PC_TOCPU_expected_prev);
	$display("| real AC_TOCPU = %b | real PC_TOCPU = %b | ",AC_TOCPU_prev,PC_TOCPU_prev);
`endif
	if (
		( AC_TOCPU_expected_prev[0] !== 1'bx ) && ( AC_TOCPU_prev[0] !== AC_TOCPU_expected_prev[0] )
		&& ((AC_TOCPU_expected_prev[0] !== last_AC_TOCPU_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_TOCPU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_TOCPU_expected_prev);
		$display ("     Real value = %b", AC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_TOCPU_exp[0] = AC_TOCPU_expected_prev[0];
	end
	if (
		( AC_TOCPU_expected_prev[1] !== 1'bx ) && ( AC_TOCPU_prev[1] !== AC_TOCPU_expected_prev[1] )
		&& ((AC_TOCPU_expected_prev[1] !== last_AC_TOCPU_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_TOCPU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_TOCPU_expected_prev);
		$display ("     Real value = %b", AC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_TOCPU_exp[1] = AC_TOCPU_expected_prev[1];
	end
	if (
		( AC_TOCPU_expected_prev[2] !== 1'bx ) && ( AC_TOCPU_prev[2] !== AC_TOCPU_expected_prev[2] )
		&& ((AC_TOCPU_expected_prev[2] !== last_AC_TOCPU_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_TOCPU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_TOCPU_expected_prev);
		$display ("     Real value = %b", AC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_TOCPU_exp[2] = AC_TOCPU_expected_prev[2];
	end
	if (
		( AC_TOCPU_expected_prev[3] !== 1'bx ) && ( AC_TOCPU_prev[3] !== AC_TOCPU_expected_prev[3] )
		&& ((AC_TOCPU_expected_prev[3] !== last_AC_TOCPU_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_TOCPU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_TOCPU_expected_prev);
		$display ("     Real value = %b", AC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_TOCPU_exp[3] = AC_TOCPU_expected_prev[3];
	end
	if (
		( AC_TOCPU_expected_prev[4] !== 1'bx ) && ( AC_TOCPU_prev[4] !== AC_TOCPU_expected_prev[4] )
		&& ((AC_TOCPU_expected_prev[4] !== last_AC_TOCPU_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_TOCPU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_TOCPU_expected_prev);
		$display ("     Real value = %b", AC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_TOCPU_exp[4] = AC_TOCPU_expected_prev[4];
	end
	if (
		( AC_TOCPU_expected_prev[5] !== 1'bx ) && ( AC_TOCPU_prev[5] !== AC_TOCPU_expected_prev[5] )
		&& ((AC_TOCPU_expected_prev[5] !== last_AC_TOCPU_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_TOCPU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_TOCPU_expected_prev);
		$display ("     Real value = %b", AC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_TOCPU_exp[5] = AC_TOCPU_expected_prev[5];
	end
	if (
		( AC_TOCPU_expected_prev[6] !== 1'bx ) && ( AC_TOCPU_prev[6] !== AC_TOCPU_expected_prev[6] )
		&& ((AC_TOCPU_expected_prev[6] !== last_AC_TOCPU_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_TOCPU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_TOCPU_expected_prev);
		$display ("     Real value = %b", AC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_TOCPU_exp[6] = AC_TOCPU_expected_prev[6];
	end
	if (
		( AC_TOCPU_expected_prev[7] !== 1'bx ) && ( AC_TOCPU_prev[7] !== AC_TOCPU_expected_prev[7] )
		&& ((AC_TOCPU_expected_prev[7] !== last_AC_TOCPU_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_TOCPU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_TOCPU_expected_prev);
		$display ("     Real value = %b", AC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_TOCPU_exp[7] = AC_TOCPU_expected_prev[7];
	end
	if (
		( PC_TOCPU_expected_prev[0] !== 1'bx ) && ( PC_TOCPU_prev[0] !== PC_TOCPU_expected_prev[0] )
		&& ((PC_TOCPU_expected_prev[0] !== last_PC_TOCPU_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[0] = PC_TOCPU_expected_prev[0];
	end
	if (
		( PC_TOCPU_expected_prev[1] !== 1'bx ) && ( PC_TOCPU_prev[1] !== PC_TOCPU_expected_prev[1] )
		&& ((PC_TOCPU_expected_prev[1] !== last_PC_TOCPU_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[1] = PC_TOCPU_expected_prev[1];
	end
	if (
		( PC_TOCPU_expected_prev[2] !== 1'bx ) && ( PC_TOCPU_prev[2] !== PC_TOCPU_expected_prev[2] )
		&& ((PC_TOCPU_expected_prev[2] !== last_PC_TOCPU_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[2] = PC_TOCPU_expected_prev[2];
	end
	if (
		( PC_TOCPU_expected_prev[3] !== 1'bx ) && ( PC_TOCPU_prev[3] !== PC_TOCPU_expected_prev[3] )
		&& ((PC_TOCPU_expected_prev[3] !== last_PC_TOCPU_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[3] = PC_TOCPU_expected_prev[3];
	end
	if (
		( PC_TOCPU_expected_prev[4] !== 1'bx ) && ( PC_TOCPU_prev[4] !== PC_TOCPU_expected_prev[4] )
		&& ((PC_TOCPU_expected_prev[4] !== last_PC_TOCPU_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[4] = PC_TOCPU_expected_prev[4];
	end
	if (
		( PC_TOCPU_expected_prev[5] !== 1'bx ) && ( PC_TOCPU_prev[5] !== PC_TOCPU_expected_prev[5] )
		&& ((PC_TOCPU_expected_prev[5] !== last_PC_TOCPU_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[5] = PC_TOCPU_expected_prev[5];
	end
	if (
		( PC_TOCPU_expected_prev[6] !== 1'bx ) && ( PC_TOCPU_prev[6] !== PC_TOCPU_expected_prev[6] )
		&& ((PC_TOCPU_expected_prev[6] !== last_PC_TOCPU_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[6] = PC_TOCPU_expected_prev[6];
	end
	if (
		( PC_TOCPU_expected_prev[7] !== 1'bx ) && ( PC_TOCPU_prev[7] !== PC_TOCPU_expected_prev[7] )
		&& ((PC_TOCPU_expected_prev[7] !== last_PC_TOCPU_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[7] = PC_TOCPU_expected_prev[7];
	end
	if (
		( PC_TOCPU_expected_prev[8] !== 1'bx ) && ( PC_TOCPU_prev[8] !== PC_TOCPU_expected_prev[8] )
		&& ((PC_TOCPU_expected_prev[8] !== last_PC_TOCPU_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[8] = PC_TOCPU_expected_prev[8];
	end
	if (
		( PC_TOCPU_expected_prev[9] !== 1'bx ) && ( PC_TOCPU_prev[9] !== PC_TOCPU_expected_prev[9] )
		&& ((PC_TOCPU_expected_prev[9] !== last_PC_TOCPU_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[9] = PC_TOCPU_expected_prev[9];
	end
	if (
		( PC_TOCPU_expected_prev[10] !== 1'bx ) && ( PC_TOCPU_prev[10] !== PC_TOCPU_expected_prev[10] )
		&& ((PC_TOCPU_expected_prev[10] !== last_PC_TOCPU_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[10] = PC_TOCPU_expected_prev[10];
	end
	if (
		( PC_TOCPU_expected_prev[11] !== 1'bx ) && ( PC_TOCPU_prev[11] !== PC_TOCPU_expected_prev[11] )
		&& ((PC_TOCPU_expected_prev[11] !== last_PC_TOCPU_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[11] = PC_TOCPU_expected_prev[11];
	end
	if (
		( PC_TOCPU_expected_prev[12] !== 1'bx ) && ( PC_TOCPU_prev[12] !== PC_TOCPU_expected_prev[12] )
		&& ((PC_TOCPU_expected_prev[12] !== last_PC_TOCPU_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[12] = PC_TOCPU_expected_prev[12];
	end
	if (
		( PC_TOCPU_expected_prev[13] !== 1'bx ) && ( PC_TOCPU_prev[13] !== PC_TOCPU_expected_prev[13] )
		&& ((PC_TOCPU_expected_prev[13] !== last_PC_TOCPU_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[13] = PC_TOCPU_expected_prev[13];
	end
	if (
		( PC_TOCPU_expected_prev[14] !== 1'bx ) && ( PC_TOCPU_prev[14] !== PC_TOCPU_expected_prev[14] )
		&& ((PC_TOCPU_expected_prev[14] !== last_PC_TOCPU_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[14] = PC_TOCPU_expected_prev[14];
	end
	if (
		( PC_TOCPU_expected_prev[15] !== 1'bx ) && ( PC_TOCPU_prev[15] !== PC_TOCPU_expected_prev[15] )
		&& ((PC_TOCPU_expected_prev[15] !== last_PC_TOCPU_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_TOCPU[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_TOCPU_expected_prev);
		$display ("     Real value = %b", PC_TOCPU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PC_TOCPU_exp[15] = PC_TOCPU_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CENTRAL_PROCESSOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg FULL_RESET;
reg START;
// wires                                               
wire [7:0] AC_TOCPU;
wire [15:0] PC_TOCPU;

wire sampler;                             

// assign statements (if any)                          
CENTRAL_PROCESSOR i1 (
// port map - connection between master ports and signals/registers   
	.AC_TOCPU(AC_TOCPU),
	.CLK(CLK),
	.FULL_RESET(FULL_RESET),
	.PC_TOCPU(PC_TOCPU),
	.START(START)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// START
initial
begin
	START = 1'b1;
end 

// FULL_RESET
initial
begin
	FULL_RESET = 1'b0;
end 

CENTRAL_PROCESSOR_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.FULL_RESET(FULL_RESET),
	.START(START),
	.sampler_tx(sampler)
);

CENTRAL_PROCESSOR_vlg_check_tst tb_out(
	.AC_TOCPU(AC_TOCPU),
	.PC_TOCPU(PC_TOCPU),
	.sampler_rx(sampler)
);
endmodule

